// migration from deprecated $buildDir : https://docs.gradle.org/current/userguide/upgrading_version_8.html#project_builddir

plugins {
    id 'groovy'
    id 'java'
    id 'codenarc'
}

defaultTasks 'clean','build'
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'

ext {
    // rootProject.name <= must be set in settings.gradle
    pluginPackageName = "com.hal.rundeck.plugin.dependenciesplugin"


    rundeckPluginEngineVersion = '2.0'
    // split accepts regexes
    rundeckVersion = project['rundeckVersion'].split('\\.')[0]

    pluginClassNames = [ 
        pluginPackageName + '.DependenciesJobsWorkflowPlugin',
        pluginPackageName + '.DependenciesFilesWorkflowPlugin',
        pluginPackageName + '.DependenciesSlotsWorkflowPlugin'
    ].join(',')
    buildDateString = new Date().format("yyyy-MM-dd'T'HH:mm:ssX")
    buildDateStringShort = new Date().format("yyyyMMdd")

    branch = System.getProperty("branch", "")
    buildNumber = System.getProperty("buildNumber", buildDateStringShort)
    isRelease = System.getProperty("isRelease", "false").toBoolean()
    artifactVersionSuffix = isRelease ? "" : "+snapshot"
    artifactVersion = "-${buildNumber}"

    buildDirectory = System.getProperty("buildDir", "build")
    docDirectory = System.getProperty("docDir", buildDirectory + "/docs")           // relative to buildir
    releaseDirectory = System.getProperty("outputDir", buildDirectory + "/lib")     // relative to buildir
    reportDirectory = System.getProperty("reportDir", buildDirectory + "/reports")  // relative to buildir
}

// plugin version
version = "v" + project['projectVersion'] + project.ext.artifactVersion + project.ext.artifactVersionSuffix

// directories
layout.buildDirectory.set( layout.projectDirectory.dir( project.ext.buildDirectory ) )


java {
    sourceCompatibility = JavaVersion.VERSION_11
}


// ref: https://docs.gradle.org/current/userguide/declaring_repositories.html
repositories {
    mavenLocal()
    mavenCentral()
}


configurations {
    //declare custom pluginLibs configuration to include only libs for this plugin
    pluginLibs

    //declare compile to extend from pluginLibs so it inherits the dependencies
    implementation{
        extendsFrom pluginLibs
    }
}


dependencies {
    implementation "org.rundeck:rundeck-core:5.+"
    implementation "org.codehaus.groovy:groovy-all:3.+"

    //use pluginLibs to add dependencies, example:
    //pluginLibs group: 'com.google.code', name: 'gson', version: '2.8.2'
    //pluginLibs group: 'org.codehaus.groovy', name: 'groovy-cli-picocli', version: '3+'

    testImplementation "junit:junit:4.+"
    testImplementation "org.codehaus.groovy:groovy-all:3+"
    testImplementation "org.spockframework:spock-core:2.2-groovy-3.0"
    //testImplementation "org.spockframework:spock-junit4"
    
    // CodeNarc analysis
    codenarc "org.codenarc:CodeNarc:3.+"
    testImplementation "org.gmetrics:GMetrics:2+"
}


// task to copy plugin libs to output/lib dir
task copyToLib(type: Copy) {
    into layout.buildDirectory.file("output/lib")
    from configurations.pluginLibs
}


jar {
    // Notice : the default value for the archive name prefix come from settings.gradle/rootProject.name
    from layout.buildDirectory.file("output")
    manifest {
        def libList = configurations.pluginLibs.collect{'lib/'+it.name}.join(' ')

        attributes 'Name': project.ext.pluginPackageName
        attributes 'Implementation-Title': rootProject.name
        attributes 'Implementation-Version': version

        attributes 'Rundeck-Plugin-Classnames': project.ext.pluginClassNames
        attributes 'Rundeck-Plugin-File-Version': version
        attributes 'Rundeck-Plugin-Name': rootProject.name
        attributes 'Rundeck-Plugin-Description': 'Plugin for Rundeck to manage dependencies between jobs'
        attributes 'Rundeck-Plugin-Rundeck-Compatibility-Version': '4.x'
        attributes 'Rundeck-Plugin-Author': 'HAL'
        attributes 'Rundeck-Plugin-License': 'Apache 2.0'
        attributes 'Rundeck-Plugin-Source-Link': 'https://github.com/Daryes/rundeck-dependencies-plugin'
        attributes 'Rundeck-Plugin-Target-Host-Compatibility': 'all'
        attributes 'Rundeck-Plugin-Tags': 'java,WorkflowStep'
        attributes 'Rundeck-Plugin-Version': project.ext.rundeckPluginEngineVersion
        attributes 'Rundeck-Plugin-Archive': 'true'
        attributes 'Rundeck-Plugin-Libs': "${libList}"
    }
    // archiveBaseName = "..."
    dependsOn(copyToLib)

    destinationDirectory.set( layout.projectDirectory.dir( project.ext.releaseDirectory ) )
}


// https://docs.gradle.org/current/dsl/org.gradle.api.tasks.javadoc.Javadoc.html
javadoc {
    title = project.ext.pluginPackageName
    source = "src/main/java"
    // destinationDir = layout.buildDirectory.dir("docs/javadoc").get().asFile
    destinationDir = file(new File(project.ext.docDirectory + "/groovydoc"))
}


// https://docs.gradle.org/current/dsl/org.gradle.api.tasks.javadoc.Groovydoc.html
groovydoc {
    docTitle = project.ext.pluginPackageName
    source = "src/main/groovy"
    // add the javadoc into groovydoc
    // source project.tasks.findByName('javadoc').source
    //destinationDir = layout.buildDirectory.dir("docs/groovydoc").get().asFile
    destinationDir = file(new File(project.ext.docDirectory + "/groovydoc"))

    shouldRunAfter(javadoc)
}


// https://docs.gradle.org/current/userguide/codenarc_plugin.html
// https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.CodeNarcExtension.html
codenarc {
    configFile = file(new File( "${project.projectDir}/.ci/codenarc.ruleset" ))
    reportsDir = file(new File(project.ext.reportDirectory))
    ignoreFailures = true
}
// customize the report types
tasks.withType(CodeNarc) {
    reports {
        xml.required =  true
        text.required = true
        html.required = false
        // has no effect - use "--quiet" on the cmdline instead of "--info"
        console.required = false
    }
}


tasks.register("doc") {
    outputs.upToDateWhen { false }
    outputs.cacheIf { false }
    dependsOn(javadoc)
    dependsOn(groovydoc)
}


tasks.register("stdout") {
    outputs.upToDateWhen { false }
    outputs.cacheIf { false }
    group = "build"
    description = "output some information"
    doLast {
        println ""
        println "Project version : " + version
        println "Build dir : " + project.ext.buildDirectory
        println "Docs  dir : " + project.ext.docDirectory
        println "Releases dir: " + project.ext.releaseDirectory
        println "Reports dir: " + project.ext.reportDirectory
    }
}
tasks.named("build") { finalizedBy("stdout") }
tasks.named("check") { finalizedBy("stdout") }


// output time when finished
gradle.getTaskGraph().whenReady { graph ->
    graph.getAllTasks().last().doLast {
        Date now = new Date()
        println "\n ***** All completed @ $now  ***"
    }
}